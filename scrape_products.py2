import requests
from bs4 import BeautifulSoup
import sqlite3
import time

# Set up the SQLite database
conn = sqlite3.connect("products.db")
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS products (
    sku TEXT PRIMARY KEY,
    title TEXT,
    description TEXT,
    url TEXT,
    location TEXT
)
""")

# Base headers for polite scraping
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
}

# Scrape a single product page
def scrape_product(url):
    r = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(r.text, 'html.parser')

    title = soup.select_one('span.base')
    description = soup.select_one('div.product.attribute.description')
    sku_el = soup.select_one('div.product.attribute.sku span')

    if title and sku_el:
        return {
            'title': title.text.strip(),
            'sku': sku_el.text.strip(),
            'description': description.text.strip() if description else '',
            'url': url
        }
    return None

# Scrape all products from a category with pagination
def scrape_category(base_url):
    page = 1
    while True:
        print(f"Scraping page {page} of: {base_url}")
        paged_url = f"{base_url}?p={page}"
        r = requests.get(paged_url, headers=HEADERS)
        soup = BeautifulSoup(r.text, 'html.parser')

        links = soup.select('a.product-item-link')
        if not links:
            break  # No more products

        for a in links:
            product_url = a['href'].split('?')[0]
            try:
                product = scrape_product(product_url)
                if product:
                    c.execute("""
                        INSERT OR REPLACE INTO products (sku, title, description, url, location)
                        VALUES (?, ?, ?, ?, COALESCE((SELECT location FROM products WHERE sku = ?), ''))
                    """, (product['sku'], product['title'], product['description'], product['url'], product['sku']))
                    conn.commit()
                    print(f"Added {product['sku']}: {product['title']}")
                time.sleep(1)  # Be kind to the server
            except Exception as e:
                print(f"Error with {product_url}: {e}")

        page += 1

# Start scraping
scrape_category("https://www.harveynorman.com.au/vacuum-laundry-appliances/vacuum-cleaners/vacuum-cleaners")
scrape_category("https://www.harveynorman.com.au/kitchen-appliances")

conn.close()
print("Done.")
